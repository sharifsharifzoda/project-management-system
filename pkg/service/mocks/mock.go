// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sharifsharifzoda/project-management-system/models"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CheckUser mocks base method.
func (m *MockAuthorization) CheckUser(user models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", user)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockAuthorizationMockRecorder) CheckUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockAuthorization)(nil).CheckUser), user)
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user *models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(user models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), user)
}

// IsEmailUsed mocks base method.
func (m *MockAuthorization) IsEmailUsed(email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmailUsed", email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmailUsed indicates an expected call of IsEmailUsed.
func (mr *MockAuthorizationMockRecorder) IsEmailUsed(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailUsed", reflect.TypeOf((*MockAuthorization)(nil).IsEmailUsed), email)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// ValidateUser mocks base method.
func (m *MockAuthorization) ValidateUser(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateUser indicates an expected call of ValidateUser.
func (mr *MockAuthorizationMockRecorder) ValidateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUser", reflect.TypeOf((*MockAuthorization)(nil).ValidateUser), user)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockUser) DeleteUser(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUser)(nil).DeleteUser), id)
}

// GetProjects mocks base method.
func (m *MockUser) GetProjects(userId int) ([]models.ProjectParticipant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects", userId)
	ret0, _ := ret[0].([]models.ProjectParticipant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects.
func (mr *MockUserMockRecorder) GetProjects(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockUser)(nil).GetProjects), userId)
}

// GetTasks mocks base method.
func (m *MockUser) GetTasks(userId int) (models.Tasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks", userId)
	ret0, _ := ret[0].(models.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockUserMockRecorder) GetTasks(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockUser)(nil).GetTasks), userId)
}

// GetUser mocks base method.
func (m *MockUser) GetUser(id int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUser)(nil).GetUser), id)
}

// Restore mocks base method.
func (m *MockUser) Restore(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockUserMockRecorder) Restore(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockUser)(nil).Restore), id)
}

// UpdatePictureUser mocks base method.
func (m *MockUser) UpdatePictureUser(id int, filepath string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePictureUser", id, filepath)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePictureUser indicates an expected call of UpdatePictureUser.
func (mr *MockUserMockRecorder) UpdatePictureUser(id, filepath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePictureUser", reflect.TypeOf((*MockUser)(nil).UpdatePictureUser), id, filepath)
}

// UpdateUser mocks base method.
func (m *MockUser) UpdateUser(newUser models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", newUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserMockRecorder) UpdateUser(newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUser)(nil).UpdateUser), newUser)
}

// UploadUserPicture mocks base method.
func (m *MockUser) UploadUserPicture(id int, filepath string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadUserPicture", id, filepath)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadUserPicture indicates an expected call of UploadUserPicture.
func (mr *MockUserMockRecorder) UploadUserPicture(id, filepath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadUserPicture", reflect.TypeOf((*MockUser)(nil).UploadUserPicture), id, filepath)
}

// MockProject is a mock of Project interface.
type MockProject struct {
	ctrl     *gomock.Controller
	recorder *MockProjectMockRecorder
}

// MockProjectMockRecorder is the mock recorder for MockProject.
type MockProjectMockRecorder struct {
	mock *MockProject
}

// NewMockProject creates a new mock instance.
func NewMockProject(ctrl *gomock.Controller) *MockProject {
	mock := &MockProject{ctrl: ctrl}
	mock.recorder = &MockProjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProject) EXPECT() *MockProjectMockRecorder {
	return m.recorder
}

// AddUserToProject mocks base method.
func (m *MockProject) AddUserToProject(managerId int, propar models.ProjectParticipant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToProject", managerId, propar)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToProject indicates an expected call of AddUserToProject.
func (mr *MockProjectMockRecorder) AddUserToProject(managerId, propar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToProject", reflect.TypeOf((*MockProject)(nil).AddUserToProject), managerId, propar)
}

// CreateProject mocks base method.
func (m *MockProject) CreateProject(project models.Project) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", project)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectMockRecorder) CreateProject(project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProject)(nil).CreateProject), project)
}

// DeleteProject mocks base method.
func (m *MockProject) DeleteProject(userId, projectId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", userId, projectId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockProjectMockRecorder) DeleteProject(userId, projectId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProject)(nil).DeleteProject), userId, projectId)
}

// GetAllProjects mocks base method.
func (m *MockProject) GetAllProjects(userId int) (models.Projects, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProjects", userId)
	ret0, _ := ret[0].(models.Projects)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProjects indicates an expected call of GetAllProjects.
func (mr *MockProjectMockRecorder) GetAllProjects(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProjects", reflect.TypeOf((*MockProject)(nil).GetAllProjects), userId)
}

// GetDeletedProjects mocks base method.
func (m *MockProject) GetDeletedProjects(userId int) (models.Projects, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletedProjects", userId)
	ret0, _ := ret[0].(models.Projects)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletedProjects indicates an expected call of GetDeletedProjects.
func (mr *MockProjectMockRecorder) GetDeletedProjects(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletedProjects", reflect.TypeOf((*MockProject)(nil).GetDeletedProjects), userId)
}

// GetProjectById mocks base method.
func (m *MockProject) GetProjectById(userId, projectId int) (models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectById", userId, projectId)
	ret0, _ := ret[0].(models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectById indicates an expected call of GetProjectById.
func (mr *MockProjectMockRecorder) GetProjectById(userId, projectId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectById", reflect.TypeOf((*MockProject)(nil).GetProjectById), userId, projectId)
}

// Restore mocks base method.
func (m *MockProject) Restore(userId, projectId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", userId, projectId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockProjectMockRecorder) Restore(userId, projectId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockProject)(nil).Restore), userId, projectId)
}

// UpdateProject mocks base method.
func (m *MockProject) UpdateProject(project models.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", project)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectMockRecorder) UpdateProject(project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProject)(nil).UpdateProject), project)
}

// MockTask is a mock of Task interface.
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
}

// MockTaskMockRecorder is the mock recorder for MockTask.
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance.
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTask) CreateTask(task models.Task) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", task)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskMockRecorder) CreateTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTask)(nil).CreateTask), task)
}

// DeleteTask mocks base method.
func (m *MockTask) DeleteTask(userId, taskId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", userId, taskId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskMockRecorder) DeleteTask(userId, taskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTask)(nil).DeleteTask), userId, taskId)
}

// GetAllTasks mocks base method.
func (m *MockTask) GetAllTasks(userId int) (models.Tasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTasks", userId)
	ret0, _ := ret[0].(models.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTasks indicates an expected call of GetAllTasks.
func (mr *MockTaskMockRecorder) GetAllTasks(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTasks", reflect.TypeOf((*MockTask)(nil).GetAllTasks), userId)
}

// GetTaskById mocks base method.
func (m *MockTask) GetTaskById(userId, taskId int) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskById", userId, taskId)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskById indicates an expected call of GetTaskById.
func (mr *MockTaskMockRecorder) GetTaskById(userId, taskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskById", reflect.TypeOf((*MockTask)(nil).GetTaskById), userId, taskId)
}

// RestoreTask mocks base method.
func (m *MockTask) RestoreTask(userId, taskId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTask", userId, taskId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreTask indicates an expected call of RestoreTask.
func (mr *MockTaskMockRecorder) RestoreTask(userId, taskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTask", reflect.TypeOf((*MockTask)(nil).RestoreTask), userId, taskId)
}

// UpdateTask mocks base method.
func (m *MockTask) UpdateTask(task models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskMockRecorder) UpdateTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTask)(nil).UpdateTask), task)
}
